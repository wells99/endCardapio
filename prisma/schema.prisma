// schema-v2.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  cnpj      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String?

  // Adicionando o campo de volta para a relaÃ§Ã£o com Order
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  sortOrder Int?
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  available   Boolean        @default(true)

  // ðŸ‘‡ Soft delete
  deleted     Boolean        @default(false)

  sortOrder   Int?

  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])

  options     ProductOption[]
  orderItems  OrderItem[]

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}


model ProductOption {
  id          Int               @id @default(autoincrement())
  name        String
  type        String
  productId   Int
  product     Product           @relation(fields: [productId], references: [id])
  items       ProductOptionItem[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductOptionItem {
  id        Int          @id @default(autoincrement())
  name      String
  price     Float        @default(0.0)
  optionId  Int
  option    ProductOption @relation(fields: [optionId], references: [id])

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Order {
  id          Int       @id @default(autoincrement())
  status      String    @default("pending")
  total       Float
  tableNumber Int?
  orderType   String?

  clientId    Int?
  
  client      Client?   @relation(fields: [clientId], references: [id])

  items       OrderItem[]
  payment     Payment?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  unitPrice   Float     // jÃ¡ guarda o preÃ§o na hora da compra

  // ðŸ‘‡ Snapshot de dados do produto no momento do pedido
  productName String
  productId   Int?
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  orderId     Int
  order       Order    @relation(fields: [orderId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  method    String
  amount    Float
  status    String
  paidAt    DateTime?

  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}