generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  cnpj      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String?  // opcional: endereço do cliente

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  sortOrder Int?      // opcional: definir a ordem de exibição no cardápio
  products  Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  available   Boolean           @default(true)
  tags        String[]          // ex.: ["vegano", "promoção"], só se precisar
  sortOrder   Int?              // opcional: ordem dentro da categoria

  categoryId  Int
  category    Category          @relation(fields: [categoryId], references: [id])

  options     ProductOption[]   // personalizações

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductOption {
  id          Int                 @id @default(autoincrement())
  name        String             // ex: "Escolha o recheio"
  type        String             // ex: "single", "multiple"
  productId   Int
  product     Product            @relation(fields: [productId], references: [id])
  items       ProductOptionItem[]

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model ProductOptionItem {
  id         Int      @id @default(autoincrement())
  name       String   // ex: "Chocolate", "Morango"
  price      Float    @default(0.0)
  optionId   Int
  option     ProductOption @relation(fields: [optionId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id           Int           @id @default(autoincrement())
  status       String        @default("pending") // ex: pending, confirmed, cancelled
  total        Float
  tableNumber  Int?          // opcional: número da mesa
  orderType    String?       // ex: "mesa", "balcao", "delivery"

  clientId     Int?          
  client       Client?       @relation(fields: [clientId], references: [id])

  items        OrderItem[]
  payment      Payment?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  quantity   Int
  unitPrice  Float

  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])

  productId  Int
  product    Product  @relation(fields: [productId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id         Int      @id @default(autoincrement())
  method     String   // ex: "pix", "dinheiro", "cartao"
  amount     Float
  status     String   // ex: "pago", "pendente", "cancelado"
  paidAt     DateTime?

  orderId    Int      @unique
  order      Order    @relation(fields: [orderId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
